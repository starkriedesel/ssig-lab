= form_for @challenge, :html => {:class => "form-horizontal"} do |f|
  %fieldset.span7.well
    .control-group{class: (@challenge.errors[:challenge_group_id].any? ? 'warning':'')}
      = f.label :challenge_group_id, :class=>'control-label'
      .controls
        = f.collection_select(:challenge_group_id,ChallengeGroup.all,:id,:name,{:prompt=>true})
        - if can? :create, ChallengeGroup
          = link_to 'New', new_challenge_group_path, :class=>'btn'
    .control-group{class: (@challenge.errors[:name].any? ? 'warning':'')}
      = f.label :name, :class=>"control-label"
      .controls
        = f.text_field :name
    .control-group{class: (@challenge.errors[:url].any? ? 'warning':'')}
      = f.label :url, :class=>"control-label"
      .controls
        = f.text_field :url
    .control-group{class: (@challenge.errors[:points].any? ? 'warning':'')}
      = f.label :points, :class=>"control-label"
      .controls
        = f.text_field :points
    .control-group{class: (@challenge.errors[:flag_type].any? ? 'warning':'')}
      = f.label :flag_type, :class=>"control-label"
      .controls
        = f.select(:flag_type,Challenge::FLAG_TYPES.map { |s,i| [ActiveSupport::Inflector::humanize(s.to_s),i] },{:prompt=>true})
    .control-group#flag_data_single{style: 'display:none'}
      %label.control-label Single Flag
      .controls
        = text_field_tag 'challenge[flag_data][single]', @challenge.flag_data[:single]
    .control-group#flag_data_set{style: 'display:none'}
      %label.control-label Flag List
      #flag_data_set_fields
        .controls
          = text_field_tag 'challenge[flag_data][set][]', nil, :class=>'flag_data_set_field'
          = button_to_function 'Remove', 'removeFlagDataSetValue(this)'
      .controls
        = button_to_function 'Add Flag', 'addFlagDataSetValue()'
    .control-group#flag_data_regex{style: 'display:none'}
      %label.control-label Flag Regex
      .controls
        = text_field_tag 'challenge[flag_data][regex]', @challenge.flag_data[:regex]
    .control-group#flag_data_ruby_gen{style: 'display:none'}
      %label.control-label Ruby Flag Generator
      .controls
        def gen()
        = text_area_tag 'challenge[flag_data][ruby_gen]', (@challenge.flag_data[:ruby_gen]), :rows=>5
    .control-group#flag_data_ruby_check{style: 'display:none'}
      %label.control-label Ruby Flag Checker
      .controls
        def check(flag_value)
        = text_area_tag 'challenge[flag_data][ruby_check', (@challenge.flag_data[:ruby_check]), :rows=>5
    .control-group{class: (@challenge.errors[:description].any? ? 'warning':'')}
      = f.label :description, :class=>"control-label"
      .controls
        = f.text_area :description, rows: 5
        %br
        %label.checkbox
          = f.check_box :description_use_markdown
          Use Markdown
  %fieldset.span7.well
    %h4 Hints
    = f.fields_for :challenge_hints do |ff|
      .control-group
        %label.control-label Text
        .controls
          = ff.text_area :hint_text, rows: 5
          %br
          %label.checkbox
            = ff.check_box :hint_text_use_markdown
            Use Markdown
      .control-group
        %label.control-label Cost
        .controls
          = ff.text_field :cost
      %hr
    = button_to_function 'Add', 'addHint()', class: 'btn'
  %fieldset.span7
    .control-group
      .controls
        - if params[:action] == 'new'
          = f.submit "Create", :class=> 'btn btn-primary'
        - elsif params[:action] == 'edit'
          = f.submit "Update", :class=> 'btn btn-primary'
        - else
          = f.submit "Submit", :class=> 'btn btn-primary'

:javascript
  var flag_types = #{Challenge::FLAG_TYPES.keys.to_json};
  var flag_set_values = #{@challenge.flag_data[:set].to_json};
  var flag_set_html = '';
  var flag_set_size = 1;

  /* Display the correct flag data fields */
  function displayFlagDataFields()
  {
    n = $('#challenge_flag_type').val();
    for(var i=0; i<flag_types.length; ++i)
    {
      $('#flag_data_'+flag_types[i]).hide();
    }
    $('#flag_data_'+flag_types[n]).show();
  }

  function addFlagDataSetValue()
  {
    $('#flag_data_set_fields').append(flag_set_html);
    flag_set_size += 1;
  }

  function removeFlagDataSetValue(btn_dom)
  {
    if(flag_set_size <= 1)
      return;
    $(btn_dom).parent('.controls').remove();
    flag_set_size -= 1;
  }

  /* On Flag Type Changes */
  $('#challenge_flag_type').change(displayFlagDataFields);

  /* OnLoad */
  $(function() {
    flag_set_html = $('#flag_data_set_fields').html();

    for(var i=1; i<flag_set_values.length; ++i)
      addFlagDataSetValue();

    var set_fields = $('.flag_data_set_field');
    for(var i=0; i<flag_set_values.length; ++i)
      set_fields.eq(i).val(flag_set_values[i])

    displayFlagDataFields();
  });

:javascript
  var hint_values = #{@challenge.challenge_hints.map{|h| {id: h.id, text: h.hint_text, cost: h.cost}}.to_json}
  var hint_html = '';
  
  function addHint()
  {
    hint_html = $('#)
  }
  
  $(function() {
  }
