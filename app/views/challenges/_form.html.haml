= form_for @challenge, :html => {:class => "form-horizontal"} do |f|
  %fieldset.span7.well
    .form-group{class: (@challenge.errors[:challenge_group_id].any? ? 'has-error':'')}
      = f.label :challenge_group_id, class: 'control-label col-sm-2'
      .col-sm-8
        = f.collection_select :challenge_group_id, ChallengeGroup.all, :id, :name, {:prompt=>true}, class: 'form-control'
      .col-sm-2
        - if can? :create, ChallengeGroup
          = link_to 'New', new_challenge_group_path, class: 'btn  btn-default'
    .form-group{class: (@challenge.errors[:name].any? ? 'has-error':'')}
      = f.label :name, class: 'control-label col-sm-2'
      .col-sm-8
        = f.text_field :name, class: 'form-control'
    .form-group
      = f.label :launch_type, class: 'control-label col-sm-2'
      .col-sm-8
        = f.select :launch_type, Challenge.launch_types.to_a.map { |a,_| [a.split('_',2)[1].humanize, a] }.to_h, {}, class: 'form-control'
    .form-group
      = f.label :submit_type, class: 'control-label col-sm-2'
      .col-sm-8
        = f.select :submit_type, Challenge.submit_types.to_a.map { |a,_| [a.split('_',2)[1].humanize, a] }.to_h, {}, class: 'form-control'
    .form-group{class: (@challenge.errors[:url].any? ? 'has-error':'')}
      = f.label :url, class: 'control-label col-sm-2'
      .col-sm-8
        = f.text_field :url, class: 'form-control'
    .form-group{class: (@challenge.errors[:docker_image_name].any? ? 'has-error':'')}
      = f.label :docker_image_name, class: 'control-label col-sm-2'
      .col-sm-8
        = f.text_field :docker_image_name, class: 'form-control'
    .form-group{class: (@challenge.errors[:points].any? ? 'has-error':'')}
      = f.label :points, class: 'control-label col-sm-2'
      .col-sm-8
        = f.text_field :points, class: 'form-control'
    .form-group{class: (@challenge.errors[:flag_type].any? ? 'has-error':'')}
      = f.label :flag_type, class: 'control-label col-sm-2'
      .col-sm-8
        = f.select :flag_type, Challenge::FLAG_TYPES.map { |s,i| [ActiveSupport::Inflector::humanize(s.to_s),i] }, {:prompt=>true}, class: 'form-control'
    .form-group#flag_data_single{style: 'display:none'}
      %label.control-label.col-sm-2 Single Flag
      .col-sm-8
        = text_field_tag 'challenge[flag_data][single]', @challenge.flag_data[:single], class: 'form-control'
    .form-group#flag_data_set{style: 'display:none'}
      %label.control-label.col-sm-2 Set
      #flag_data_set_fields.col-sm-10.container
        .row
          .col-sm-8
            = text_field_tag 'challenge[flag_data][set][]', nil, class: 'flag_data_set_field form-control'
          .col-sm-2
            = link_to 'Remove', '#', onclick: 'removeFlagDataSetValue(this); return false', class: 'btn btn-danger'
      .col-sm-10.col-sm-offset-2
        = link_to 'Add Flag', '#', onclick: 'addFlagDataSetValue(); return false', class: 'btn btn-primary'
    .form-group#flag_data_regex{style: 'display:none'}
      %label.control-label.col-sm-2 Flag Regex
      .col-sm-8
        = text_field_tag 'challenge[flag_data][regex]', @challenge.flag_data[:regex], class: 'form-control'
    .form-group#flag_data_ruby_gen{style: 'display:none'}
      %label.control-label.col-sm-2 Ruby Flag Generator
      .col-sm-8
        def gen()
        = text_area_tag 'challenge[flag_data][ruby_gen]', (@challenge.flag_data[:ruby_gen]), :rows=>5, class: 'form-control'
    .form-group#flag_data_ruby_check{style: 'display:none'}
      %label.control-label.col-sm-2 Ruby Flag Checker
      .col-sm-8
        def check(flag_value)
        = text_area_tag 'challenge[flag_data][ruby_check', (@challenge.flag_data[:ruby_check]), :rows=>5, class: 'form-control'
    .form-group{class: (@challenge.errors[:description].any? ? 'has-error':'')}
      = f.label :description, class: 'control-label col-sm-2'
      .col-sm-8
        = f.text_area :description, rows: 5, class: 'form-control'
        %br
        .checkbox
          %label
            = f.check_box :description_use_markdown
            Use Markdown
  %fieldset.span7.well
    %h4 Hints
    - @challenge.challenge_hints.each do |hint|
      = render partial: 'hint_form', locals: {hint: hint}
    /
      = f.fields_for :challenge_hints do |ff|
        .form-group
          %label.control-label col-sm-2 Text
          .col-sm-10
            = ff.text_area :hint_text, rows: 5
            %br
            %label.checkbox
              = ff.check_box :hint_text_use_markdown
              Use Markdown
        .form-group
          %label.control-label col-sm-2 Cost
          .col-sm-10
            = ff.text_field :cost
    .new_hint_html{style:'display:none'}
      = render partial: 'hint_form', locals: {hint: ChallengeHint.new}
    .new_hints
    = link_to 'Add', '#', onclick: 'addHint(); return false', class: 'btn btn-default'
  %fieldset.span7
    .form-group
      .col-sm-10
        - if params[:action] == 'new'
          = f.submit "Create", class:  'btn btn-primary'
        - elsif params[:action] == 'edit'
          = f.submit "Update", class:  'btn btn-primary'
        - else
          = f.submit "Submit", class:  'btn btn-primary'

:javascript
  function showHideConfigFields()
  {
    var launch_type = $('#challenge_launch_type').val();
    if(launch_type == 'launch_download') {
      $('#challenge_url').parents('.form-group').removeClass('hidden');
    }
    else {
      $('#challenge_url').parents('.form-group').addClass('hidden');
    }
    if(launch_type == 'launch_docker') {
      $('#challenge_docker_image_name').parents('.form-group').removeClass('hidden');
    }
    else {
      $('#challenge_docker_image_name').parents('.form-group').addClass('hidden');
    }
  }
  $('#challenge_launch_type').change(showHideConfigFields);
  $(function () { showHideConfigFields(); });

:javascript
  var flag_types = #{Challenge::FLAG_TYPES.keys.to_json.html_safe};
  var flag_set_values = #{(@challenge.flag_data[:set] || []).to_json.html_safe};
  var flag_set_html = '';
  var flag_set_size = 1;

  /* Display the correct flag data fields */
  function displayFlagDataFields()
  {
    n = $('#challenge_flag_type').val();
    for(var i=0; i<flag_types.length; ++i)
    {
      $('#flag_data_'+flag_types[i]).hide();
    }
    if(n == #{Challenge::FLAG_TYPES[:any_set]})
      n = #{Challenge::FLAG_TYPES[:set]};
    $('#flag_data_'+flag_types[n]).show();
  }

  function addFlagDataSetValue()
  {
    $('#flag_data_set_fields').append(flag_set_html);
    flag_set_size += 1;
  }

  function removeFlagDataSetValue(btn_dom)
  {
    if(flag_set_size <= 1)
      return;
    $(btn_dom).parents('.row').first().remove();
    flag_set_size -= 1;
  }

  /* On Flag Type Changes */
  $('#challenge_flag_type').change(displayFlagDataFields);

  /* OnLoad */
  $(function() {
    flag_set_html = $('#flag_data_set_fields').html();

    for(var i=1; i<flag_set_values.length; ++i)
      addFlagDataSetValue();

    var set_fields = $('.flag_data_set_field');
    for(var i=0; i<flag_set_values.length; ++i)
      set_fields.eq(i).val(flag_set_values[i])

    displayFlagDataFields();
  });

:javascript
  var hint_values = #{@challenge.challenge_hints.map{|h| {id: h.id, text: h.hint_text, cost: h.cost}}.to_json.html_safe};
  var hint_html = $('new_hint_html').innerHtml;
  
  function addHint() {
    $('.new_hints').append(hint_html);
  }

  function removeHint(btn) {
    hint_div = $(btn).parents('.hint');
    console.log(hint_div.find('#challenge_challenge_hints_attributes__id').length > 0);
    if(hint_div.find('#challenge_challenge_hints_attributes__id').length > 0) {
      hint_div.find('#challenge_challenge_hints_attributes___destroy').val(1);
      hint_div.hide();
    }
    else {
    console.log('remove');
      hint_div.remove();
    }
  }
  
  $(function() {
    hint_html = $('.new_hint_html').html();
  });
